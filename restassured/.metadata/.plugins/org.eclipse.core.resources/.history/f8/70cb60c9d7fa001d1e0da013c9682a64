package RestAssured.RestAssured;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.module.jsv.JsonSchemaValidator;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.XML;
import org.testng.Assert;

import com.fasterxml.jackson.databind.ObjectMapper;

import static io.restassured.module.jsv.JsonSchemaValidator.*;

/**
 * Hello world!
 *
 */
public class RestRequests 
{

	public RestRequests() {

		System.out.println("RestRequests constructor");
	}


	/***
	 * given() is used to define prerequistes, e.d.g authentication, passing request header, passing authorization, passing cookie
	 * when() to used to send request, get, post, put, delete, patch
	 * then() is to assertion, or validation 
	 * log().all() is to log all request headers, response and everything, showing all in console
	 * 
	 */

	private int id;


	public void getRequestexample() {



		// without static import	
		//	String response = RestAssured.get("https://reqres.in/api/users/1").asString();

		// with static import, static method get is directly used withour writing the class name
		String response = get("https://reqres.in/api/users/1").asString();

		//	System.out.println(response);


	}


	public void createUser1() {

		// using Hashmap

		HashMap hm = new HashMap();
		hm.put("name", "devendra");
		hm.put("job", "manager");

		given().contentType("application/json").body(hm)

		.when().post("https://reqres.in/api/users")

		.then().statusCode(201).body("name", equalTo("devendra"));

		id = 

				given().contentType("application/json").body(hm)

				.when().post("https://reqres.in/api/users")

				.jsonPath().getInt("id");

		System.out.println("user id " + id + " created by reading from hashmap");


	}

	public void createUser2() {

		// using json.org

		JSONObject data = new JSONObject();
		data.put("name", "devendra d");
		data.put("job", "manager");

		given().contentType("application/json").body(data.toString())

		.when().post("https://reqres.in/api/users")

		.then().statusCode(201).body("name", equalTo("devendra d"));

		id = 

				given().contentType("application/json").body(data.toString())

				.when().post("https://reqres.in/api/users")

				.jsonPath().getInt("id");

		System.out.println("user id " + id + " created from jsonobject");


	}

	public void createUser3() {

		// using pojo

		DataPojo data = new DataPojo();
		data.setJob("manager");
		data.setName("devendra devendra");

		given().contentType("application/json").body(data)

		.when().post("https://reqres.in/api/users")

		.then().statusCode(201).body("name", equalTo("devendra devendra"));

		id = 

				given().contentType("application/json").body(data)

				.when().post("https://reqres.in/api/users")

				.jsonPath().getInt("id");

		System.out.println("user id " + id + " created  by readong from pojo");


	}

	public void createUser4() throws FileNotFoundException {

		// using external json

		File f = new File(System.getProperty("user.dir") + "/data.json");

		FileReader fr = new FileReader(f);

		JSONTokener data1 = new JSONTokener(fr);

		JSONObject data = new JSONObject(data1);


		given().contentType("application/json").body(data.toString())

		.when().post("https://reqres.in/api/users")

		.then().statusCode(201).body("name", equalTo("devendra singh"));

		id = 

				given().contentType("application/json").body(data.toString())

				.when().post("https://reqres.in/api/users")

				.jsonPath().getInt("id");

		System.out.println("user id " + id + " created by reading external json");


	}

	public void updateUser() {

		// for creating user we need to send request body as well

		HashMap hm = new HashMap();
		hm.put("name", "devendra");
		hm.put("job", "qa");


		given().contentType("application/json").body(hm)

		.when().put("https://reqres.in/api/users/" + id)

		.then().statusCode(200).body("job", equalTo("qa"));


	}

	public void getUser() {


		System.out.println(" id is " + id);

		// using static import so RestAssured.when() is not required, directly using when()
		// validate status code
		given().when().get("https://reqres.in/api/users/" + id)
		.then().log().all();


	}

	public void sendParam() {

		// sending path and query parameters https://reqres.in/api/users?page=2&id=1

		// query parameter is add by default as per syntax

		int id = 1;

		given().pathParam("mypath", "users")



		.queryParam("page", 2).queryParam("id", id).


		when()

		.get("https://reqres.in/api/{mypath}")


		.then().statusCode(200).body("data['id']", equalTo(id)).log().all();

	}

	public void cookie() {

		//	given().when().get("https://www.google.com").then().statusCode(200)

		//	.cookie("AEC", "AUEFqZdSBg9RWACZQrMAbwo87iLmMCrOu2ax3UOoEf6Hz27v3V5iIFhiJk4").log().all();

		Response res = given().when().get("https://www.google.com");


		String cookie = res.getCookie("AEC");

		Map map = res.getCookies();

		Iterator itr =  map.entrySet().iterator();

		while(itr.hasNext()) {

			System.out.println(itr.next());

			Map.Entry<String, String> pair = (Entry<String, String>) itr.next();

			System.out.println(pair.getKey() + " is the key ");


		}

		given().when().get("https://www.google.com").then().log().all();

		Response res1 = given().when().get("https://www.google.com");








	}

	public void headersInfo() {



		given().when().get("https://www.google.com").then().log().all();


		given().when().get("https://www.google.com").then().header("Content-Type", "text/html; charset=ISO-8859-1")

		.and().header("Server", "gws")

		.and().header("X-Frame-Options", "SAMEORIGIN");


		Response res = 	given().when().get("https://www.google.com");

		Headers headers = res.headers();

		headers.get("get any header by passing its name here");

		List<Header> allHeadersAsString = headers.asList();


		for(Header header : allHeadersAsString) {

			System.out.print("header name" + header.getName());
			System.out.print("header value " + header.getValue());

		}



	}

	public void parseResponse() throws IOException {


		Response res = given().when().get("https://reqres.in/api/unknown");


		Assert.assertEquals(res.statusCode(), 200);


		JSONObject data = new JSONObject(res.asString());

		File f = new File(System.getProperty("user.dir") + "/myjson.json");

		FileWriter fw = new FileWriter(f);

		f.createNewFile();

		fw.write(res.asString());

		fw.flush();


		System.out.println(data);

		int sum = 0;


		for(int i = 0; i<data.getJSONArray("data").length(); i++) {

			System.out.println(data.getJSONArray("data").getJSONObject(i).get("name"));

			sum+= Integer.parseInt(data.getJSONArray("data").getJSONObject(i).get("year").toString());


		}


		System.out.println("sum of all years is " + sum);




	}

	public void xmlResponse() {

		Response response = given().when().get("http://restapi.adequateshop.com/api/Traveler?page=6");



	}

	public void jsonSchemaValidator() {


		// first download the schema from any site and save it 
		// save the json file also for which above schema is to be verified

		given().when().get("https://reqres.in/api/unknown").then().log().body();

		given().when().get("https://reqres.in/api/unknown").then().assertThat().body(JsonSchemaValidator.matchesJsonSchema(new File(System.getProperty("user.dir")+"/schema.json")));



	}

	public void serializeAndDeserialize() throws IOException {

		// from pojo to json object so that transmission can be done over internet or object can be stored in file or hdd
		// is serialization

		// converting back from json to pojo for using the original object is deserialization




		DataPojo data = new DataPojo();


		data.setJob("manager");
		data.setName("devendra devendra");

		// conver data java object into json object i.e. serialization

		ObjectMapper objMapper = new ObjectMapper();


		String obj = objMapper.writerWithDefaultPrettyPrinter().writeValueAsString(data);

		System.out.print(obj);




		// deserializing

		String jsonData = "{\n"
				+ "  \"name\" : \"devendra devendra singh\",\n"
				+ "  \"job\" : \"manager manager\"\n"
				+ "}";

		ObjectMapper objMapper1 = new ObjectMapper();

		DataPojo dp = objMapper1.readValue(jsonData, DataPojo.class);

		System.out.println("my pojo object class variable job " + dp.getJob());

		System.out.println("my pojo object class variable name " + dp.getName());






	}
	
	public void setAuth() {
		
		// its a part of given
		
		HashMap<String, String> map = new HashMap<>();
		
		map.put("controller", "user");
		map.put("method", "register");

		
		Response res = given().auth().basic("intelligent", "Stripes39!").body(map.to).get("https://stagingapp.resumebuilder.com/api/get_nonce");
		
		
		System.out.print(res.asPrettyString());
		
	}


}
