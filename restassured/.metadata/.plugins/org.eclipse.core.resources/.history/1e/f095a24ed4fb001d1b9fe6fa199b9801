package gorest.pomEndpoints;

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

import io.restassured.response.Response;
import gorest.logger.Log;
import gorest.payloads.UserPayload;
import gorest.utilities.ReadConfig;

public class UserEndPoints {


	public Response createUser(UserPayload payload) {

		
		given().auth().oauth2(DEFAULT_BODY_ROOT_PATH).contentType("").body("").when().post(Routes.getPostUrl()).then().log().all();

		/*
		Response response = given().auth().oauth2("")(ReadConfig.getProperty("contentType")).
				body(payload).when().post(Routes.getPostUrl());

		return response;
		*/

	}

	public void readUser(String userName) {
	
			
		Log.logInfo("getting details for user: " + userName);
		
		given().contentType(ReadConfig.getProperty("contentType")).pathParam("username", userName)
		.when().get(Routes.getGetUrl()).then().log().all();

		/*Response response = given().pathParam("username", userName)
				.when().get(Routes.getGetUrl());

		return response;
		*/
	}

	public Response deleteUser() {

		Log.logInfo("inside deleteUser");


		Response response = given().contentType(ReadConfig.getProperty("contentType")).

				when().delete(Routes.getDeleteUrl());

		return response;
	}

	public Response updateUser(String userName, UserPayload payload) {

		Log.logInfo("inside updateUser");


		Response response = given().contentType(ReadConfig.getProperty("contentType")).accept(ReadConfig.getProperty("contentType")).

				body(payload).when().put(Routes.getUpdateUrl());

		return response;
	}




}
